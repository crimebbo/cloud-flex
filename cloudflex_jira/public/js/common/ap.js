let flexAP = {};/** * 아틀라시안  javascript AP 모듈 * @param url * @param type * @param data * @param callback */flexAP.callApi = function (url, type, data ,callback) {    AP.require(['request'], function(request) {        request({            url: url,            data: JSON.stringify(data),            type: type,            success: function(response) {                // Convert the string response to JSON                response = JSON.parse(response);                callback(response);            },            error: function(response) {                callback(response);                console.log(arguments);                console.log(response);            },            contentType: "application/json"        });    });};/** * 로그인한 사용자 정보 가져오기 */flexAP.getCurrentUser = function (callback) {    AP.user.getCurrentUser(function(user) {        AP.require(['request'], function(request) {            request({                url: '/rest/api/user/memberof?accountId=' + user.atlassianAccountId,                type: 'GET',                success: function(response) {                    // Convert the string response to JSON                    response = JSON.parse(response);                    callback(response);                },                error: function(response) {                    callback(response);                    console.log(arguments);                    console.log(response);                },                contentType: "application/json"            });        });    });};/** * 유저  정보 가져오기 */flexAP.getUserinfo = function (accountId,callback) {    AP.require(['request'], function(request) {        request({            url: '/rest/api/user?accountId='+ accountId,            type: 'GET',            success: function(response) {                // Convert the string response to JSON                response = JSON.parse(response);                callback(response);            },            error: function(response) {                callback(response);                console.log(arguments);                console.log(response);            },            contentType: "application/json"        });    });};/** * 그룹  정보 가져오기 */flexAP.getGroups = function (callback) {    AP.require(['request'], function(request) {        request({            url: '/rest/api/3/groups/picker',            type: 'GET',            success: function(response) {                // Convert the string response to JSON                response = JSON.parse(response);                callback(response);            },            error: function(response) {                callback(response);                console.log(arguments);                console.log(response);            },            contentType: "application/json"        });    });};/** * 그룹에  속한 멤버 조회 */flexAP.getGroupMember = function (groupName,callback) {    AP.require(['request'], function(request) {        request({            url: '/rest/api/group/member?name='+groupName,            type: 'GET',            success: function(response) {                // Convert the string response to JSON                response = JSON.parse(response);                callback(response);            },            error: function(response) {                callback(response);                console.log(arguments);                console.log(response);            },            contentType: "application/json"        });    });};/*** 클라우드 총 멤버 수*/flexAP.getAllMemberCount = function (config,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/getAllMemberCount?context-token=' + token + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken, true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * 그룹에 속한 유저 정보 가져오기 */flexAP.getGroupMembers = function (groupName,config,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/getGroupMembers?context-token=' + token +'&groupName=' + groupName            + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken, true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * 그룹에 속한 라이선스 유저 및 유저 그룹 카운트  정보 가져오기 */flexAP.getDashboardMemberCount = function (groupName1,groupName2,config,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/getDashboardMemberCount?context-token=' + token +'&groupName1=' + groupName1 + '&groupName2=' + groupName2            + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken,true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * 사용자를 그룹의 구성원으로 추가 */flexAP.addMemberToGroup = function (accountId,name,config,callback) {    // eslint-disable-next-line no-undef    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/addMemberToGroup?context-token=' + token +'&accountId=' + accountId + '&name=' +name            + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken, true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * 사용자를 그룹의 구성원으로 추가 */flexAP.removeMemberToGroup = function (accountId,name,config,callback) {    // eslint-disable-next-line no-undef    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/removeMemberToGroup?context-token=' + token +'&accountId=' + accountId + '&name=' +name            + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken, true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * 라이선스 그룹 또는  유저그룹 유저 네임 조회 */flexAP.getGroupTotalMembers = function (groupName1,groupName2,config,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/getGroupTotalMembers?context-token=' + token +'&groupName1=' + groupName1 + '&groupName2=' + groupName2            + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken, true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * 유저  그룹 상태 확인 */flexAP.getGroupMemberState = function (groupName1,groupName2,config,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/getGroupMemberState?context-token=' + token +'&groupName1=' + groupName1 + '&groupName2=' + groupName2            + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken, true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * 로그인한 사용자 정보 가져오기 */flexAP.CQL = function (callback) {        AP.require(['request'], function(request) {            request({                url: '/rest/atlassian-connect/1/addons/kr.osci.apps.flex_jira',                type: 'GET',                success: function(response) {                    // Convert the string response to JSON                    response = JSON.parse(response);                    callback(response);                },                error: function(response) {                    callback(response);                    console.log(arguments);                    console.log(response);                },                contentType: "application/json",                //Authorization: 'Bearer qtVqXJWvC89RPb2JRksP'            });        });};/** *  컨플런스 라이선스 정보 가저오기 */flexAP.getWikiLicenseInfo = function (config,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/getWikiLicenseInfo?context-token=' + token            + '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken, true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** *  컨플런스 스케쥴러 등록 서비스 */flexAP.setSchedulerService = function (deactiveScheduleHour,deactiveScheduleInterval,deactiveEnabled,config,actionType,locale,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/setSchedulerService?context-token=' + token +'&deactiveScheduleHour='+deactiveScheduleHour +                                    '&deactiveScheduleInterval='+deactiveScheduleInterval+'&deactiveEnabled='+deactiveEnabled +                                    '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken +'&orgApiKey=' +config.orgApiKey + '&actionType=' +actionType + + '&locale=' +locale +                                    '&authAdminEmail_id=' +config.authAdminEmail_id + '&authAdminEmail_pw=' +encodeURIComponent(config.authAdminEmail_pw) , true);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** *  컨플런스 강제 삭제 */flexAP.removeForceUser = function (count,config,targetGroup,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/removeForceUser?context-token=' + token +'&count='+ count +            '&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken +'&orgApiKey=' +config.orgApiKey + '&targetGroup=' + targetGroup);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** *  config 환경설정 key 유효성 체크 */flexAP.validateConfig = function (p1,p2,p3,p4,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        AP.user.getCurrentUser(function(user) {            var xhr = new XMLHttpRequest();            xhr.open('GET', '/validateConfig?context-token=' + token + '&acid='+ user.atlassianAccountId +                '&p1='+ p1+'&p2='+ p2+'&p3='+ p3+'&p4='+ p4 );            xhr.onload = function () {                // Request finished. Do processing here.            };            xhr.onreadystatechange = function () {                if (xhr.readyState === 4) {                    var responseObject = JSON.parse(xhr.response);                    callback(responseObject);                }            };            xhr.send(null);        });    });};/** *  조직 api key 등록 */flexAP.orgApiKeySave = function (orgApikey,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        AP.user.getCurrentUser(function(user) {            var xhr = new XMLHttpRequest();            xhr.open('GET', '/orgApiKeySave?context-token=' + token + '&orgApikey='+ orgApikey + '&acid='+ user.atlassianAccountId);            xhr.onload = function () {                // Request finished. Do processing here.            };            xhr.onreadystatechange = function () {                if (xhr.readyState === 4) {                    var responseObject = JSON.parse(xhr.response);                    callback(responseObject);                }            };            xhr.send(null);        });    });};/** *  관리자  api key 등록 */flexAP.adminApiTokenSave = function (adminApiToken,orgApikey,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        AP.user.getCurrentUser(function(user) {            var xhr = new XMLHttpRequest();            xhr.open('GET', '/adminTokenSave?context-token=' + token + '&adminApiToken='+ adminApiToken +                '&acid='+ user.atlassianAccountId + '&orgApikey='+ orgApikey);            xhr.onload = function () {                // Request finished. Do processing here.            };            xhr.onreadystatechange = function () {                if (xhr.readyState === 4) {                    var responseObject = JSON.parse(xhr.response);                    callback(responseObject);                }            };            xhr.send(null);        });    });};/** *  이메일 유효성 체크 */flexAP.SendEmailCheck = function (id,pw,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef            var xhr = new XMLHttpRequest();            xhr.open('GET', '/sendEmailCheck?context-token=' + token +'&id='+ encodeURIComponent(id)+'&pw='+ encodeURIComponent(pw));            xhr.onload = function () {                // Request finished. Do processing here.            };            xhr.onreadystatechange = function () {                if (xhr.readyState === 4) {                    var responseObject = JSON.parse(xhr.response);                    callback(responseObject);                }            };            xhr.send(null);    });};/** *  이메일 유효성 체크 */flexAP.removeForceUserCheck = function (cnt,adminID,adminApiToken,targetGroup,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef            var xhr = new XMLHttpRequest();            xhr.open('GET', '/removeForceUserCheck?context-token=' + token +'&cnt='+ cnt                +'&adminID='+ adminID+'&adminApiToken='+ adminApiToken+'&targetGroup='+ targetGroup);            xhr.onload = function () {                // Request finished. Do processing here.            };            xhr.onreadystatechange = function () {                if (xhr.readyState === 4) {                    var responseObject = JSON.parse(xhr.response);                    callback(responseObject);                }            };            xhr.send(null);    });};/** * 마지막 로그인활동 기록 체크 * @param lastDays * @param config * @param targetGroup * @param callback */flexAP.getLastActive = function (lastDays,config,targetGroup,callback) {    AP.context.getToken(function (token) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/getLastActive?context-token=' + token +'&lastDays='+ lastDays +'&orgApiKey=' +                                   config.orgApiKey +'&targetGroup=' + targetGroup +'&adminID=' +config.adminID  + '&adminApiToken=' +config.adminApiToken);        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};/** * apikey 체크 * @param lastDays * @param config * @param targetGroup * @param callback */flexAP.checkOrgApiKey = function (config,callback) {    AP.user.getCurrentUser(function(user) {        // eslint-disable-next-line no-undef        var xhr = new XMLHttpRequest();        xhr.open('GET', '/checkOrgApiKey?orgApiKey=' + config.orgApiKey +"&accountId=" + user.atlassianAccountId );        xhr.onload = function () {            // Request finished. Do processing here.        };        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                var responseObject = JSON.parse(xhr.response);                callback(responseObject);            }        };        xhr.send(null);    });};flexAP.getLocale = function (callback) {     AP.user.getLocale(function(locale){        callback(locale);    });};flexAP.flag = function (title,body,type,actions) {    // eslint-disable-next-line no-unused-vars    let flag = AP.flag.create({        title: title,        body: body,        type: type,        actions: {            'actionkey': actions        }    });};