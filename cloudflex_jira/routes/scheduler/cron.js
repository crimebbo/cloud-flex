import sendEmail from "../email/sendEmail";import verifiedclaims from "../uitills/verifiedclaims";const schedule = require('node-schedule');const fetch = require('node-fetch');const Headers = require('fetch-headers');export default function cronjob(app, addon, jwt,deactiveScheduleHour,deactiveScheduleInterval,                                deactiveEnabled,token,orgKey,adminID,adminApiToken,authUser,authPass,actionType,locale) {    /**     * 스케쥴러 체크     */    if(actionType === 'auto'){        let jobList = schedule.scheduledJobs;        var job;        for(let jobName in jobList){            job = jobName;        }        if(job !== undefined){            return 'auto';        }    }    //작업중인 스케쥴러 초기화    scheduledJobsEmpty();    let rule = new schedule.RecurrenceRule();    // deactiveScheduleInterval 1이면 하루에 한번 7이면 주에 한번 30이면 한달에 한번 돈다.    if(deactiveEnabled){        if(deactiveScheduleInterval === '1'){            console.log("deactiveScheduleInterval", deactiveScheduleInterval);            rule.dayOfWeek =[0, new schedule.Range(0,6)];            rule.hour = deactiveScheduleHour;            rule.minute = 0;            //rule.second = 10;            // eslint-disable-next-line no-empty        }else if(deactiveScheduleInterval === '7'){            rule.dayOfWeek =[6];            rule.hour = deactiveScheduleHour;            rule.minute = 0;            // eslint-disable-next-line no-empty        }else{            rule.month =deactiveScheduleInterval;            rule.hour = deactiveScheduleHour;            rule.minute = 0;        }        // eslint-disable-next-line no-unused-vars        let job = schedule.scheduleJob(rule, () => {            console.log("startSchedule", 'startSchedule');            excuteJob(app, addon, jwt,token);        });    }    /**     * 등록된 스케쥴러 초기화     */     function scheduledJobsEmpty() {        let jobList = schedule.scheduledJobs;        console.log('jobList1',jobList);        for(let jobName in jobList){            schedule.cancelJob(jobName);        }        console.log('jobList2',jobList);    }    /**     * 스케쥴러 시작     */    function excuteJob(app, addon, jwt,token) {        // 애드온정보 조회        verifiedclaims(token, jwt, addon, getStore);    }    function getStore(data){        console.log('getStore',data);        var userKey = data.publicKey;        var clientKey = data.clientkey;        var addonkey = data.addonkey;        let baseUrl = data.baseUrl;        var url = '/rest/atlassian-connect/1/addons/kr.osci.apps.flex_jira/properties/flex-license-key';        /**         * 저장된 flex 정보를 조회후 값을 세팅 한후 라이선스 그룹의 유저를 삭제 한다.         */        getHTTPClient(clientKey, userKey,addonkey).get(url,            function (err, response, contents) {                contents = JSON.parse(contents);                console.log('contents',contents);                if(contents.value.licenseEntity.deactiveEnabled !== true) return;                var targetGroup = contents.value.licenseEntity.targetGroup;                var lastlogin = contents.value.licenseEntity.lastLogin;                var notiLimit = contents.value.licenseEntity.notiLimit;                var notiGroup = contents.value.licenseEntity.notiGroup;                getRemoveMeber(baseUrl,targetGroup,lastlogin,_setRemoveMeber);                function _setRemoveMeber(removeInfo) {                    var licenseGroupCnt = Number(removeInfo.licGroupSize) - Number(removeInfo.removeCnt);                    var removeUserlist = removeInfo.removeUserList;                    for (let idx in removeUserlist) {                        removeLicenseUser(baseUrl,removeUserlist[idx].account_id, targetGroup);                    }                    if(removeUserlist.length > Number(notiLimit)){                        getnotiGroup(baseUrl,notiGroup,getNotiGroupMember);                        function getNotiGroupMember(member){                            var notiGroupMembers =  JSON.parse(member);                            for (let i in notiGroupMembers.values) {                                settingEmail(notiGroupMembers.values[i].accountId,licenseGroupCnt,baseUrl );                            }                        }                    }                }        });    }    /**     * 메일을 세팅하고 전송한다.     * @param accountId     * @param licenseGroupCnt     */    function settingEmail(accountId,licenseGroupCnt,baseUrl) {        console.log('accountId',accountId);        var myHeaders = new Headers();        myHeaders.append("Authorization", "Bearer " + orgKey);        var requestOptions = {            method: 'GET',            headers: myHeaders,            redirect: 'follow'        };        fetch("https://api.atlassian.com/users/" + accountId + "/manage/profile", requestOptions)            .then(response => response.text())            .then(result =>{                result =  JSON.parse(result);                console.log('email',result);                var to = result.account.email !== undefined ? result.account.email : "";                sendEmail(authUser,authPass,adminID,to,licenseGroupCnt,locale,baseUrl);            })            .catch(error => console.log('error', error));    }    function getnotiGroup(baseUrl,notigroup,callback) {        var myHeaders = new Headers();        var basicAuth = adminID + ':' + adminApiToken;        myHeaders.append('Authorization', `Basic ${Buffer.from(            basicAuth).toString('base64')}`);        var requestOptions = {            method: 'GET',            headers: myHeaders,            redirect: 'follow'        };        console.log('notigroup', notigroup);        fetch(baseUrl + "/rest/api/3/group/member?groupname="+notigroup, requestOptions)            .then(response => response.text())            .then(result => {                callback(result)            })            .catch(error => console.log('error', error));    }    function getHTTPClient(clientKey, userKey,addonkey) {        return addon.httpClient({            clientKey: clientKey,            userKey: userKey,            appKey: addonkey        });    }        function removeLicenseUser(baseUrl,accountId,targetGroup) {        var removeUrl =baseUrl + '/rest/api/3/group/user?groupname=' + targetGroup + '&accountId=' + accountId;        var basicAuth = adminID + ':' + adminApiToken;        var myHeaders = new Headers();        myHeaders.append('Authorization', `Basic ${Buffer.from(            basicAuth).toString('base64')}`);        myHeaders.append('Accept', 'application/json');        var requestOptions = {            method: 'DELETE',            headers: myHeaders,            redirect: 'follow'        };        fetch(removeUrl, requestOptions)            .then(response => {                console.log(                    `Response: ${response.status} ${response.statusText}`                );                if(response.status === 204){                }            })            .then(result => result)            .catch(error => error);    }    /**     * 삭제 대상 유저 추출     */    function getRemoveMeber(baseUrl,targetGroup,lastlogin,callback){        getOrgId(orgKey,getLastActiveDate);        function getLastActiveDate(res){            var orgInfos = JSON.parse(res);            if(orgInfos.data[0] === undefined){                var removeInfo = {                    removeCnt : 0,                    licGroupSize: 0,                    removeUserList:0                }                callback(removeInfo);            }            var orgId = orgInfos.data[0].id;            getAllMember(orgId,_setAllMeber);            function _setAllMeber(allMember) {                var licUserList = [];                console.log('allMember', allMember.length);                getCanuseGroup(getCanUserinfo);                function getCanUserinfo(res) {                    var canuseInfo = JSON.parse(res);                    console.log('canuseInfo', canuseInfo);                    for (let i in allMember) {                        for (let j in canuseInfo.values) {                            if(canuseInfo.total > 0 && canuseInfo.values[j].accountId === allMember[i].account_id){                                var removeUser = new Object();                                removeUser.last_active = getLastActiveTime(allMember[i].last_active);                                removeUser.name = allMember[i].name;                                removeUser. account_id = allMember[i].account_id;                                removeUser. email = allMember[i].email;                                licUserList.push(removeUser);                            }                        }                    }                    var agoTime = lastlogin === 0 ? new Date().getTime() : new Date().getTime() - parseInt(lastlogin) * 24 * 60 * 60 * 1000;                    var removeUserList = [];                    for(let idx in licUserList){                        if(parseInt(licUserList[idx].last_active) < agoTime){                            removeUserList.push(licUserList[idx]);                        }                    }                    var removeInfo ={                        removeCnt : removeUserList.length,                        licGroupSize: canuseInfo.total,                        removeUserList:removeUserList                    }                    console.log('removeInfo', removeInfo);                    //var licGroupSize = canuseInfo.size;                    callback(removeInfo);                }            }        }        function getCanuseGroup(callback) {            var myHeaders = new Headers();            var basicAuth = adminID + ':' + adminApiToken;            myHeaders.append('Authorization', `Basic ${Buffer.from(                basicAuth).toString('base64')}`);            var requestOptions = {                method: 'GET',                headers: myHeaders,                redirect: 'follow'            };            console.log('targetGroup', targetGroup);            fetch(baseUrl + "/rest/api/3/group/member?groupname="+targetGroup, requestOptions)                .then(response => response.text())                .then(result => {                    callback(result)                })                .catch(error => console.log('error', error));        }        function getOrgId(orgApiKey,callback){            var myHeaders = new Headers();            myHeaders.append("Authorization", "Bearer " + orgApiKey);            var requestOptions = {                method: 'GET',                headers: myHeaders,                redirect: 'follow'            };            fetch("https://api.atlassian.com/admin/v1/orgs", requestOptions)                .then(response => response.text())                .then(result => {                    console.log(result)                    callback(result)                })                .catch(error => console.log('error', error));        }        function getLastActiveTime(lastActive) {            // eslint-disable-next-line use-isnan            return  lastActive === undefined  ? new Date().getTime() : new Date(lastActive).getTime();        }        function getAllMember(orgId,callback) {            var myHeaders = new Headers();            myHeaders.append("Authorization", "Bearer " + orgKey );            var requestOptions = {                method: 'GET',                headers: myHeaders,                redirect: 'follow'            };            fetch("https://api.atlassian.com/admin/v1/orgs/"+ orgId +"/users", requestOptions)                .then(response => response.text())                .then(result => {                    var userMember = JSON.parse(result);                    if(userMember.links.next !== undefined){                        getCursorAllMember(userMember.links.next,_setCursorAllMember);                        function _setCursorAllMember(res) {                            var nextMember = JSON.parse(res);                            userMember = userMember.data.concat(nextMember.data);                            if(nextMember.links.next !== undefined){                                getCursorAllMember(nextMember.links.next,_setCursorAllMember);                            }else{                                callback(userMember);                            }                        }                    }else{                        callback(userMember);                    }                })                .catch(error => console.log('error', error));        }        function getCursorAllMember(url,callback) {            var myHeaders = new Headers();            myHeaders.append("Authorization", "Bearer " + orgKey );            var requestOptions = {                method: 'GET',                headers: myHeaders,                redirect: 'follow'            };            fetch(url, requestOptions)                .then(response => response.text())                .then(result => {                    callback(result)                })                .catch(error => console.log('error', error));        }    }    return '200';}